<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

    <!-- 配置数据源 -->
    <!--数据库连接池有很多选择，c3p、dhcp、proxool等，此处使用:druid  需要jar包:druid.*.jar-->
    <!--数据源1配置开始-->
    <bean id="dataSourceDruid" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${dataSource.driverClassName}" />
        <property name="url">
            <value>${dataSource.url}</value>
        </property>
        <property name="username" value="${dataSource.username}"></property>
        <property name="password" value="${dataSource.password}"></property>
        <!--初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时-->
        <property name="initialSize" value="${dataSource.initialSize}" />
        <!--已经不再使用，配置了也没效果-->
        <!--<property name="maxIdle" value="${dataSource.maxIdle}" />-->
        <!--最小连接池数量-->
        <property name="minIdle" value="${dataSource.minIdle}" />
        <!--最大连接池数量-->
        <property name="maxActive" value="${dataSource.maxActive}" />
        <!--获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
        如果需要可以通过配置useUnfairLock属性为true使用非公平锁。-->
        <property name="maxWait" value="${dataSource.maxWait}" />
        <!-- 是否自动回收超时连接  -->
        <property name="removeAbandoned" value="false" />
        <!--超时时间(以秒数为单位)property -->
        <property name="removeAbandonedTimeout" value="30" />
        <!-- 是否在自动回收超时连接的时候打印连接的超时错误  -->
        <property name="logAbandoned" value="true" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />
        <!--是否缓存preparedStatement，也就是PSCache。-->
        <!--PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭-->
        <!--<property name="poolPreparedStatements" value="false" />-->
        <!--要启用PSCache，必须配置大于0，当大于0时，(默认值：-1)poolPreparedStatements自动触发修改为true。
        在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100-->
        <!--<property name="maxOpenPreparedStatements" value="20" />-->
        <property name="defaultAutoCommit" value="true" />
        <!--用来检测连接是否有效的sql，要求是一个查询语句-->
        <!--如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
        <property name="validationQuery" value="select 1 from dual" />
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
        <property name="testOnBorrow" value="false" />
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnReturn" value="false" />
        <!--建议配置为true，不影响性能，并且保证安全性。
        申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
        <property name="testWhileIdle" value="true" />
        <!-- 配置间隔多久才进行一次检测,检测需要关闭的空闲连接/testWhileIdle的判断依据,单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!--filters:属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
        监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall-->
        <!--<property name="filters" value="stat" />-->
        <property name="filters" value="mergeStat" />
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceDruid" />
        <!-- mybatis配置xml路径 -->
        <property name="configLocation" value="classpath:config/mybatis-config.xml" />
        <!-- mybatis映射xml扫描路径 -->
        <property name="mapperLocations" value="classpath*:com/atat/**/dao/*.xml" />
        <!-- Sql映射设置为大小写不敏感 -->
        <!-- <property name="typeAliases" value="org.springframework.util.LinkedCaseInsensitiveMap"
            /> -->
    </bean>
    <!-- 配置sqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 映射扫描路径 -->
        <property name="basePackage" value="com.atat.**.dao" />
        <!-- session工厂注入,如果多数据源情况下必写,防止注入失败 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    <!-- 数据库事务策略 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource">
            <ref bean="dataSourceDruid" />
        </property>
    </bean>
    <!-- 全注解方式  需加上@Transactional -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <!--数据源1配置完成-->

    <!-- 数据库事务切面配置 -->
    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.atat..service.*.*(..))" />
    </aop:config>

    <!--javaMelody数据监控配置-->
    <bean id="springDataSourceBeanPostProcessor" class="net.bull.javamelody.SpringDataSourceBeanPostProcessor">
    </bean>
    <bean id="wrappedDataSourcet" class="net.bull.javamelody.SpringDataSourceFactoryBean">
        <property name="targetName" value="dataSourceDruid" />
    </bean>

    <!--druid spring monitor setting -->
    <!--<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />-->
    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--<value>com.atat.propeservicetion.*</value>-->
                <!--<value>com.atat.property.service.*</value>-->
                <!--<value>com.atat.property.dao.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <!--<aop:config proxy-target-class="true">-->
        <!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />-->
    <!--</aop:config>-->

</beans>
